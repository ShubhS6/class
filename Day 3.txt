@PostMapping("/fetchMetrics")
public String fetchMetrics(@RequestParam String ipAddress, @RequestParam String community, @RequestParam String oid, Model model) {
    try {
        String memoryUsage = snmpService.getAsString(oid, ipAddress, community);
        model.addAttribute("memoryUsage", memoryUsage);
        Device device = new Device(ipAddress, memoryUsage, "Online");
        model.addAttribute("memoryUsage", memoryUsage);
        List<Device> devices = new ArrayList<>();
        devices.add(device);
        model.addAttribute("devices", devices);
    } catch (Exception e) {
        model.addAttribute("memoryUsage", "Error: " + e.getMessage());
    }
    return "index";
}






























@PostMapping("/fetchMetrics")
    public String fetchRouterMetrics(@RequestParam String ipAddress, @RequestParam String community, Model model) {
        try {
            // OID for CPU usage (this example is for a Cisco router)
            String cpuUsageOid = "1.3.6.1.4.1.9.2.1.57.0";
            String cpuUsage = snmpService.getAsString(cpuUsageOid, ipAddress, community);

            // Create a new device with the fetched CPU usage (you can modify as needed)
            Device device = new Device(ipAddress, cpuUsage, "Online");
            
            
            model.addAttribute("cpuUsage", cpuUsage);
            
         // Optionally, update the device list (this example shows how to add the fetched device)
            List<Device> devices = new ArrayList<>();
            devices.add(device);
            
            // Add the updated device list to the model
            model.addAttribute("devices", devices);
            
        } catch (Exception e) {
            model.addAttribute("cpuUsage", "Error: " + e.getMessage());
        }
        return "index";
    }





rpc message-id-"101" xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">

<edit-config>

<target>

<running/>

</target>

<config>

<native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native">

<interface>

<Loopback>

<name>4</name>

<ip>

<address>

<primary>

<address>14.1.1.1</address>

<mask 255.255.255.0</mask>

</primary>

</address>

</ip>

</Loopback>

</interface>

</native>

</config>

</edit-config>

</rpc>













Assignment on PDCP layer

sequence number
header Compression
integrity Protection
ciphering


it is based on Rohc it is protocol to compress the header
ip packet is of size 40 byte dont consider much usefull

#include <iostream>

class PDCP {
private:
    int sequenceNumber;  // Sequence number counter

public:
    PDCP() : sequenceNumber(0) {}  // Constructor to initialize sequence number
    
    // Method to get the next sequence number
    int getNextSequenceNumber() {
        return sequenceNumber++;
    }
};

int main() {
    PDCP pdcpInstance;

    // Simulate sending packets with sequence numbers
    for (int i = 0; i < 5; ++i) {
        int sequenceNumber = pdcpInstance.getNextSequenceNumber();
        std::cout << "Sending packet with sequence number: " << sequenceNumber << std::endl;
    }

    return 0;
}














[11:51 AM] Abhijeet kumar
#include <iostream>

#include <vector>

#include <cstdint>
 
class PDCP_Session {

private:

    uint32_t TX_NEXT = 0;  // Next transmitting sequence number

    uint32_t RX_NEXT = 0;  // Next expected receiving sequence number
 
public:

    // Simulate sending a PDCP packet

    void send_packet() {

        std::cout << "Sending packet with SN: " << TX_NEXT << std::endl;

        TX_NEXT = (TX_NEXT + 1) % 4096;  // Assume 12-bit SN for example

    }
 
    // Simulate receiving a PDCP packet

    void receive_packet(uint32_t sn) {

        if (sn == RX_NEXT) {

            std::cout << "Received packet with SN: " << sn << " successfully.\n";

            RX_NEXT = (RX_NEXT + 1) % 4096;  // Update the expected SN

        } else {

            std::cout << "Error: Received packet with SN: " << sn << ", expected SN: " << RX_NEXT << std::endl;

            // Handle error: could involve sequence number correction, retransmission requests, etc.

        }

    }

};
 
int main() {

    PDCP_Session session;
 
    // Simulating a normal sequence

    session.send_packet();

    session.receive_packet(0);  // Correct sequence
 
    session.send_packet();

    session.receive_packet(1);  // Correct sequence
 
    // Introducing an error in sequence

    session.send_packet();

    session.receive_packet(3);  // Incorrect sequence
 
    return 0;

}

















#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/applications-module.h"
#include "ns3/point-to-point-module.h"
 
using namespace ns3;
 
class PDCP_Session : public Application {
private:
    uint32_t TX_NEXT = 0; // Next transmitting sequence number
    uint32_t RX_NEXT = 0; // Next expected receiving sequence number
 
public:
    PDCP_Session() {}
 
    static TypeId GetTypeId(void) {
        static TypeId tid = TypeId("PDCP_Session")
            .SetParent<Application>()
            .SetGroupName("Tutorial");
        return tid;
    }
 
    virtual void StartApplication() {
        Simulator::Schedule(Seconds(1.0), &PDCP_Session::SendPacket, this);
    }
 
    virtual void StopApplication() {}
 
    void SendPacket() {
        std::cout << "Sending packet with SN: " << TX_NEXT << std::endl;
        // Simulate immediate receipt of the packet
        ReceivePacket(TX_NEXT);
        TX_NEXT = (TX_NEXT + 1) % 4096; // Assuming 12-bit sequence number
        Simulator::Schedule(Seconds(1.0), &PDCP_Session::SendPacket, this);
    }
 
    void ReceivePacket(uint32_t sn) {
        std::cout << "Receiving packet with SN: " << sn << std::endl;
        if (sn == RX_NEXT) {
            std::cout << "Received packet with SN: " << sn << " correctly." << std::endl;
            RX_NEXT = (RX_NEXT + 1) % 4096;
        } else {
            std::cout << "Sequence error: Received SN " << sn << ", expected " << RX_NEXT << std::endl;
        }
    }
};
 
int main(int argc, char *argv[]) {
    CommandLine cmd;
    cmd.Parse(argc, argv);
 
    NodeContainer nodes;
    nodes.Create(2);
 
    PointToPointHelper pointToPoint;
    pointToPoint.SetDeviceAttribute("DataRate", StringValue("5Mbps"));
    pointToPoint.SetChannelAttribute("Delay", StringValue("2ms"));
 
    NetDeviceContainer devices;
    devices = pointToPoint.Install(nodes);
 
    InternetStackHelper stack;
    stack.Install(nodes);
 
    Ipv4AddressHelper address;
    address.SetBase("10.1.1.0", "255.255.255.0");
 
    Ipv4InterfaceContainer interfaces = address.Assign(devices);
 
    Ptr<PDCP_Session> pdcp = CreateObject<PDCP_Session>();
    nodes.Get(0)->AddApplication(pdcp);
    pdcp->SetStartTime(Seconds(1.0));
    pdcp->SetStopTime(Seconds(10.0));
 
    Simulator::Run();
    Simulator::Destroy();
 
    return 0;
}






























#include <iostream>
#include <vector>
#include <cstdint>
#include <zlib.h>  // For zlib compression functions

class PDCP_Session {
private:
    uint32_t TX_NEXT = 0;  // Next transmitting sequence number
    uint32_t RX_NEXT = 0;  // Next expected receiving sequence number

public:
    // Simulate sending a PDCP packet with compression
    void send_packet(std::vector<uint8_t>& data) {
        // Compress data using zlib
        std::vector<uint8_t> compressed_data(data.size() * 2);  // Allocate space for compressed data

        uLongf compressed_size = compressed_data.size();
        compress(&compressed_data[0], &compressed_size, &data[0], data.size());

        std::cout << "Sending packet with SN: " << TX_NEXT << ", Compressed size: " << compressed_size << std::endl;
        TX_NEXT = (TX_NEXT + 1) % 4096;  // Assume 12-bit SN for example

        // Simulate transmission over the air interface
        // transmit(compressed_data, compressed_size);
    }

    // Simulate receiving a PDCP packet with decompression
    void receive_packet(std::vector<uint8_t>& data, uint32_t sn) {
        std::vector<uint8_t> decompressed_data(data.size() * 2);  // Allocate space for decompressed data

        uLongf decompressed_size = decompressed_data.size();
        uncompress(&decompressed_data[0], &decompressed_size, &data[0], data.size());

        if (sn == RX_NEXT) {
            std::cout << "Received packet with SN: " << sn << ", Decompressed size: " << decompressed_size << " successfully.\n";
            RX_NEXT = (RX_NEXT + 1) % 4096;  // Update the expected SN
        } else {
            std::cout << "Error: Received packet with SN: " << sn << ", expected SN: " << RX_NEXT << std::endl;
            // Handle error: could involve sequence number correction, retransmission requests, etc.
        }
    }
};

int main() {
    PDCP_Session session;

    // Simulating data to be sent
    std::vector<uint8_t> data_to_send = {0x45, 0x00, 0x00, 0x3c, 0x1c, 0x46, 0x40, 0x00, 0x40, 0x06, 0xaf, 0xc1, 0xc0, 0xa8, 0x01, 0x68, 0xc0, 0xa8, 0x01, 0x64};
    uint32_t sequence_number = 0;

    // Simulating sending and receiving packets
    session.send_packet(data_to_send);
    session.receive_packet(data_to_send, sequence_number);

    return 0;
}






















#include "ns3/core-module.h"

#include "ns3/network-module.h"

#include "ns3/internet-module.h"

#include "ns3/point-to-point-module.h"

#include "ns3/applications-module.h"

#include "ns3/udp-socket-factory.h"

#include "ns3/log.h"
 
using namespace ns3;
 
NS_LOG_COMPONENT_DEFINE("IntegrityProtectionApplication");
 
class IntegrityProtectionApplication : public Application {

private:

    Ptr<Socket> m_socket;   // Socket for communication

    Address m_peerAddress;  // Peer address

    uint16_t m_peerPort;    // Peer port
 
protected:

    virtual void StartApplication() override {

        NS_LOG_INFO("Starting Integrity Protection Application");

        m_socket = Socket::CreateSocket(GetNode(), UdpSocketFactory::GetTypeId());

        m_socket->Bind();

        m_socket->Connect(InetSocketAddress(Ipv4Address::ConvertFrom(m_peerAddress), m_peerPort));

        Simulator::Schedule(Seconds(1.0), &IntegrityProtectionApplication::SendPacket, this);

    }
 
    virtual void StopApplication() override {

        NS_LOG_INFO("Stopping Integrity Protection Application");

        if (m_socket) {

            m_socket->Close();

            m_socket = 0;

        }

    }
 
    void SendPacket() {

        NS_LOG_INFO("Sending packet with integrity protection");

        std::string data = "Hello, this is a test packet!";

        Ptr<Packet> packet = Create<Packet>((uint8_t*)data.c_str(), data.length());
 
        // Simulate integrity protection by appending a hash

        uint32_t hash = GenerateHash(data);

        packet->AddPaddingAtEnd(4);  // Add space for the hash

        packet->WriteUint32AtEnd(hash);
 
        m_socket->Send(packet);

    }
 
    uint32_t GenerateHash(const std::string &data) {

        // Simple hash function for demonstration

        uint32_t hash = 0;

        for(char c : data) {

            hash = 5 * hash + c;

        }

        return hash;

    }
 
public:

    IntegrityProtectionApplication() : m_peerPort(0) {}
 
    void Setup(Address address, uint16_t port) {

        m_peerAddress = address;

        m_peerPort = port;

    }

};
 
int main(int argc, char *argv[]) {

    CommandLine cmd;

    cmd.Parse(argc, argv);
 
    NodeContainer nodes;

    nodes.Create(2);
 
    PointToPointHelper p2p;

    p2p.SetDeviceAttribute("DataRate", StringValue("5Mbps"));

    p2p.SetChannelAttribute("Delay", StringValue("2ms"));
 
    NetDeviceContainer devices = p2p.Install(nodes);

    InternetStackHelper stack;

    stack.Install(nodes);
 
    Ipv4AddressHelper address;

    address.SetBase("10.1.1.0", "255.255.255.0");

    Ipv4InterfaceContainer interfaces = address.Assign(devices);
 
    uint16_t port = 9;

    Ptr<IntegrityProtectionApplication> app = CreateObject<IntegrityProtectionApplication>();

    app->Setup(interfaces.GetAddress(1), port);

    nodes.Get(0)->AddApplication(app);

    app->SetStartTime(Seconds(1.0));

    app->SetStopTime(Seconds(10.0));
 
    Simulator::Run();

    Simulator::Destroy();
 
    return 0;

}















#include "ns3/core-module.h"

#include "ns3/network-module.h"

#include "ns3/internet-module.h"

#include "ns3/point-to-point-module.h"

#include "ns3/applications-module.h"

#include "ns3/udp-socket-factory.h"

#include "ns3/log.h"
 
using namespace ns3;
 
NS_LOG_COMPONENT_DEFINE("PdcpCipheringApplication");
 
class PdcpCipheringApplication : public Application {

private:

    Ptr<Socket> m_socket;   // Socket for communication

    Address m_peerAddress;  // Peer address

    uint16_t m_peerPort;    // Peer port
 
protected:

    virtual void StartApplication() override {

        NS_LOG_INFO("Starting PDCP Ciphering Application");

        m_socket = Socket::CreateSocket(GetNode(), UdpSocketFactory::GetTypeId());

        m_socket->Bind();

        m_socket->Connect(InetSocketAddress(Ipv4Address::ConvertFrom(m_peerAddress), m_peerPort));

        Simulator::Schedule(Seconds(1.0), &PdcpCipheringApplication::SendPacket, this);

    }
 
    virtual void StopApplication() override {

        NS_LOG_INFO("Stopping PDCP Ciphering Application");

        if (m_socket) {

            m_socket->Close();

            m_socket = 0;

        }

    }
 
    void SendPacket() {

        NS_LOG_INFO("Sending packet");

        Ptr<Packet> packet = Create<Packet>(1024);  // Create a packet of 1024 bytes

        m_socket->Send(packet);

    }
 
public:

    PdcpCipheringApplication() : m_peerPort(0) {}
 
    void Setup(Address address, uint16_t port) {

        m_peerAddress = address;

        m_peerPort = port;

    }

};
 
int main(int argc, char *argv[]) {

    CommandLine cmd;

    cmd.Parse(argc, argv);
 
    NodeContainer nodes;

    nodes.Create(2);
 
    PointToPointHelper p2p;

    p2p.SetDeviceAttribute("DataRate", StringValue("5Mbps"));

    p2p.SetChannelAttribute("Delay", StringValue("2ms"));
 
    NetDeviceContainer devices = p2p.Install(nodes);

    InternetStackHelper stack;

    stack.Install(nodes);
 
    Ipv4AddressHelper address;

    address.SetBase("10.1.1.0", "255.255.255.0");

    Ipv4InterfaceContainer interfaces = address.Assign(devices);
 
    uint16_t port = 9;

    Ptr<PdcpCipheringApplication> pdcpApp = CreateObject<PdcpCipheringApplication>();

    pdcpApp->Setup(interfaces.GetAddress(1), port);

    nodes.Get(0)->AddApplication(pdcpApp);

    pdcpApp->SetStartTime(Seconds(1.0));

    pdcpApp->SetStopTime(Seconds(10.0));
 
    Simulator::Run();

    Simulator::Destroy();
 
    return 0;

}

